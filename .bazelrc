common --enable_bzlmod
# build --action_env=BAZEL_CXXOPTS="-std=c++23"
# test --action_env=BAZEL_CXXOPTS="-std=c++23"
# build --action_env=CC=clang
# build --action_env=CXX=clang++
build --disk_cache=~/.cache/shared_bazel_action_cache/
test --disk_cache=~/.cache/shared_bazel_action_cache/
test --test_verbose_timeout_warnings

build --cxxopt='-std=c++2b'
test --cxxopt='-std=c++2b'

build --copt="--language=c++"
test --copt="--language=c++"

build --cxxopt="-O3"
test --cxxopt="-O3"

# modules
# build --cxxopt="-fmodules-ts"
# test --cxxopt="-fmodules-ts"

# Avx512
# build --cxxopt="-march=native"
# test --cxxopt="-march=native"

# build --cxxopt="-m64"
# test --cxxopt="-m64"

# build --cxxopt="-mavx512f"
# test --cxxopt="-mavx512f"

# build --cxxopt="-mprefer-vector-width=512"
# test --cxxopt="-mprefer-vector-width=512"

build --copt="-fdiagnostics-color=always"
test --copt="-fdiagnostics-color=always"
run --copt="-fdiagnostics-color=always"

# build --copt='-fcolor-diagnostics'
# test --copt='-fcolor-diagnostics'
# run --copt='-fcolor-diagnostics'
# Use cursor controls in screen output.
# Docs: https://bazel.build/docs/user-manual#curses
# build --curses=yes
# test --curses=yes

# Use colors to highlight output on the screen. Set to `no` if your CI does not display colors.
# Docs: https://bazel.build/docs/user-manual#color
build --color=yes
test --color=yes

build --curses=yes
test --curses=yes

# Promote unused result and variable warnings to errors.
build --cxxopt='-Werror=unused-result'
test --cxxopt='-Werror=unused-result'
build --cxxopt='-Werror=unused-variable'
test --cxxopt='-Werror=unused-variable'

# Promote warnings about missing braces on if/else blocks to errors.
build --cxxopt='-Werror=dangling-else'
test --cxxopt='-Werror=dangling-else'

# TODO(sokolik): fix it
build --copt='-Wno-deprecated-declarations'
test --copt='-Wno-deprecated-declarations'

# build --test_arg=--colour-mode=ansi
# test --test_arg=--colour-mode=ansi
build --test_output=errors
test --test_output=errors

###############################################################
# Use `bazel build --config=release` to enable these settings #
###############################################################

build:release --copt -O3
build:release --copt -Wall
build:release --copt -DNDEBUG


# Address sanitizer
############################################################
# Use `bazel build --config=asan` to enable these settings #
############################################################

build:asan --action_env=ASAN_OPTIONS=detect_leaks=1:detect_odr_violation=1:detect_stack_use_after_return=1
build:asan --features=address_sanitizer
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
# build:asan --copt -O1
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

# build:asan --copt -fsanitize=address,undefined
# build:asan --linkopt -fsanitize=address,undefined
# build:asan --copt -fno-sanitize-recover=all

# Thread sanitizer
############################################################
# Use `bazel build --config=tsan` to enable these settings #
############################################################

build:tsan --strip=never
build:tsan --copt -fsanitize=thread
build:tsan --copt -DTHREAD_SANITIZER
build:tsan --copt -DDYNAMIC_ANNOTATIONS_ENABLED=1
build:tsan --copt -DDYNAMIC_ANNOTATIONS_EXTERNAL_IMPL=1
# build:tsan --copt -O1
build:tsan --copt -fno-omit-frame-pointer
build:tsan --linkopt -fsanitize=thread

# Memory sanitizer
############################################################
# Use `bazel build --config=msan` to enable these settings #
############################################################

build:msan --action_env=ASAN_OPTIONS=detect_leaks=1:detect_odr_violation=1:detect_stack_use_after_return=1
build:msan --strip=never
build:msan --copt -fsanitize=memory
build:msan --copt -fsanitize-memory-track-origins=2
build:msan --copt -DADDRESS_SANITIZER
# build:msan --copt -DGTEST_USE_OWN_TR1_TUPLE=1
# build:msan --copt -O1
build:msan --copt -fno-omit-frame-pointer
build:msan --linkopt -fsanitize=memory
build:msan --action_env=clang-18
build:msan --action_env=clang++-18
# build:msan --action_env=PATH
build:msan --action_env=CXXFLAGS=-stdlib=libc++
build:msan --action_env=BAZEL_CXXOPTS=-stdlib=libc++
build:msan --action_env=BAZEL_LINKLIBS=-lc++:-lc++abi:-lm
build:msan --host_linkopt=-fuse-ld=lld

# Undefined Behavior Sanitizer
#############################################################
# Use `bazel build --config=ubsan` to enable these settings #
#############################################################

build:ubsan --action_env=UBSAN_OPTIONS=print_stacktrace=1
build:ubsan --strip=never
build:ubsan --copt -fsanitize=undefined
# build:ubsan --copt -fsanitize=integer
# build:ubsan --copt -fsanitize=bool
# build:ubsan --copt -fsanitize=float-divide-by-zero
# build:ubsan --copt -fsanitize=unsigned-integer-overflow
# build:ubsan --copt -fsanitize=signed-integer-overflow
# build:ubsan --copt -fsanitize-minimal-runtime
# build:ubsan --copt -O1
build:ubsan --copt -fno-omit-frame-pointer
build:ubsan --linkopt -fsanitize=undefined
# build:ubsan --linkopt -fsanitize=integer
# build:ubsan --linkopt -fsanitize=bool
# build:ubsan --linkopt -fsanitize=float-divide-by-zero
# build:ubsan --linkopt -fsanitize=unsigned-integer-overflow
# build:ubsan --linkopt -fsanitize=signed-integer-overflow
# build:ubsan --linkopt -fno-omit-frame-pointer

# Debug
############################################################
# Use `bazel test --config=debug` to enable these settings #
############################################################

# Stream stdout/stderr output from each test in real-time.
# Docs: https://bazel.build/docs/user-manual#test-output
test:debug --test_output=streamed

# Run one test at a time.
# Docs: https://bazel.build/reference/command-line-reference#flag--test_strategy
test:debug --test_strategy=exclusive

# Prevent long running tests from timing out.
# Docs: https://bazel.build/docs/user-manual#test-timeout
test:debug --test_timeout=9999

# Always run tests even if they have cached results.
# Docs: https://bazel.build/docs/user-manual#cache-test-results
test:debug --nocache_test_results

build:debug --copt -O2
test:debug --copt -O2
# build:debug --copt -Wall

build:debug --copt -g
test:debug --copt -g

build:debug -c dbg
test:debug -c dbg

build:debug --copt -DNDEBUG
test:debug --copt -DNDEBUG

build:debug --strip=never
test:debug --strip=never

build:debug --cxxopt='-Wno-error=unused-variable'
test:debug --cxxopt='-Wno-error=unused-variable'

# Clang-tidy
##################################################################
# Use `bazel build --config=clang-tidy` to enable these settings #
##################################################################

build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy --output_groups=report
build:clang-tidy --@bazel_clang_tidy//:clang_tidy_config=//:clang_tidy_config

# Clang-format
##################################################################
# Use `bazel build --config=clang-format` to enable these settings #
##################################################################
build:clang-format --aspects @bazel_clang_format//:defs.bzl%clang_format_aspect
build:clang-format --@bazel_clang_format//:config=//:clang_format_config
build:clang-format --output_groups=report

# Continuous Integration tool
##########################################################
# Use `bazel build --config=ci` to enable these settings #
##########################################################

query:ci --noshow_progress
query:ci --noshow_loading_progress
fetch:ci --noshow_progress
fetch:ci --noshow_loading_progress
fetch:ci --show_task_finish
fetch:ci --keep_going
build:ci --noshow_progress
build:ci --noshow_loading_progress
build:ci --show_task_finish
build:ci --action_env=PATH
build:ci --keep_going
build:ci --verbose_failures
build:ci --test_output=errors
test:ci --test_env=CI

# Setup compiler flags - required for Qt6 is at least C++17
build:gcc9 --cxxopt=-std=c++2a
build:gcc9 --cxxopt=-Wall
build:gcc9 --cxxopt=-Werror

# GCC 11.2
#build:gcc11 --cxxopt=-std=c++23 # blocked by emsdk
build:gcc11 --cxxopt=-std=c++20
build:gcc11 --cxxopt=-Wall
#build:gcc11 --cxxopt=-Werror
#build:gcc11 --cxxopt=-Wno-error=volatile # blocked by emsdk
##build:gcc11 --cxxopt=-Wextra

# Visual Studio 2019
build:vs2019 --cxxopt=/std:c++20
build:vs2019 --cxxopt=/Zc:__cplusplus # Untested
build:vs2019 --enable_runfiles # https://github.com/bazelbuild/bazel/issues/8843
build:vs2019 --define compiler=vs2019
build:vs2019 --copt=-DWIN32_LEAN_AND_MEAN
build:vs2019 --copt=-DNOGDI
build:vs2019 --host_copt=-DWIN32_LEAN_AND_MEAN
build:vs2019 --host_copt=-DNOGDI

# Visual Studio 2022
build:vs2022 --cxxopt=/std:c++20
build:vs2022 --cxxopt=/Zc:__cplusplus
build:vs2022 --enable_runfiles # https://github.com/bazelbuild/bazel/issues/8843
build:vs2022 --define compiler=vs2022
build:vs2022 --copt=-DWIN32_LEAN_AND_MEAN
build:vs2022 --copt=-DNOGDI
build:vs2022 --host_copt=-DWIN32_LEAN_AND_MEAN
build:vs2022 --host_copt=-DNOGDI

# macOS (e.g. Clang 12.0.0)
build:macos --cxxopt=-std=c++2a
build:macos --cxxopt=-Wall

# https://github.com/catchorg/Catch2/issues/2779
build --copt=-D_LIBCPP_DISABLE_AVAILABILITY
test --copt=-D_LIBCPP_DISABLE_AVAILABILITY
